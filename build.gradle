buildscript {
    ext {
		springBootVersion = '2.0.2.RELEASE'
		jacocoVersion = '0.7.7.201606060606'
  		checkstyleVersion = '7.2'
  		pmdVersion = '5.5.2'
	}
    repositories {
        mavenLocal()
	    jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: "maven"
apply plugin: "jacoco"
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: "project-report"
apply plugin: "build-dashboard"


bootJar {
    
    baseName = 'cm-user-api'
    
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

group    = "com.cloudcompilerr"
version =  '0.1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.projectlombok:lombok', { changing =true })
	compile('com.cloudcompilerr:cloudcompilerr-logger-v1:0.0.1-SNAPSHOT')
	compile('com.h2database:h2')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	testCompile('junit:junit:4.12') {
        exclude group: 'org.hamcrest'
    }
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

jacoco {
  toolVersion = jacocoVersion
  
}

jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = true
  }
  afterEvaluate {
   classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
         //'**/*UserApplication**',
        // 'com/cloudcompilerr/development/**'
        ])
       })
      }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
        excludes = [
        // 'com.cloudcompilerr.development.*'
         
        ]
            limit {
                minimum = 0.08
            }
        }
        rule {
        excludes = [
         'com.cloudcompilerr.development.*'
        //'**.*UserApplication**'
        ]
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
            
        }
    }
}

//test.finalizedBy jacocoTestReport


test { 
 finalizedBy jacocoTestReport 
 ignoreFailures = false
 
}


checkstyle {
  toolVersion = checkstyleVersion
  config = rootProject.resources.text.fromFile('etc/checkstyle/rules.xml')
}

// use below if u want to fail build for checkstyle failure
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

pmd {
  toolVersion = pmdVersion
  ruleSetConfig = rootProject.resources.text.fromFile('etc/pmd/ruleset.xml')
  ignoreFailures = true // set false if u want to fail build for pmd failure
}

check.dependsOn jacocoTestCoverageVerification

check.finalizedBy projectReport

projectReport.finalizedBy buildDashboard

// create  a fat jar using the jar task from java plugin
/*jar {
	baseName = 'cm-user-api'
    manifest {
        attributes "Main-Class": "com.cloudcompilerr.development.UserApplication"
    }
 
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}*/